// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const changeStatusOfPendingUser = `-- name: ChangeStatusOfPendingUser :one
UPDATE pending_users
SET status = $1, updated_at = NOW()
WHERE id = $2
RETURNING id, email, name, status, created_at, updated_at
`

type ChangeStatusOfPendingUserParams struct {
	Status string
	ID     uuid.UUID
}

func (q *Queries) ChangeStatusOfPendingUser(ctx context.Context, arg ChangeStatusOfPendingUserParams) (PendingUser, error) {
	row := q.db.QueryRow(ctx, changeStatusOfPendingUser, arg.Status, arg.ID)
	var i PendingUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users(id,email,name,updated_at)
VALUES ($1,$2,$3,$4)
RETURNING id, created_at, updated_at, email, name
`

type CreateUserParams struct {
	ID        uuid.UUID
	Email     string
	Name      string
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Name,
	)
	return i, err
}

const deletePendingUserByEmail = `-- name: DeletePendingUserByEmail :one
DELETE FROM pending_users
WHERE email = $1
RETURNING id, email, name, status, created_at, updated_at
`

func (q *Queries) DeletePendingUserByEmail(ctx context.Context, email string) (PendingUser, error) {
	row := q.db.QueryRow(ctx, deletePendingUserByEmail, email)
	var i PendingUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, email, name FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Name,
	)
	return i, err
}

const pendingUserByEmail = `-- name: PendingUserByEmail :one
SELECT id, email, name, status, created_at, updated_at FROM pending_users
WHERE email = $1
`

func (q *Queries) PendingUserByEmail(ctx context.Context, email string) (PendingUser, error) {
	row := q.db.QueryRow(ctx, pendingUserByEmail, email)
	var i PendingUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const savePendingUser = `-- name: SavePendingUser :one
INSERT INTO pending_users(id, email, name)
VALUES ($1, $2, $3)
RETURNING id, email, name, status, created_at, updated_at
`

type SavePendingUserParams struct {
	ID    uuid.UUID
	Email string
	Name  string
}

func (q *Queries) SavePendingUser(ctx context.Context, arg SavePendingUserParams) (PendingUser, error) {
	row := q.db.QueryRow(ctx, savePendingUser, arg.ID, arg.Email, arg.Name)
	var i PendingUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
